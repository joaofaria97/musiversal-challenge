/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * Music Collection API
 * The Music Collection API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  Song,
  SongControllerCreateBody,
  SongControllerDelete200,
  SongControllerFindAllParams,
  SongControllerUpdateBody,
} from "../model";
import { customInstanceAsync } from "../mutator/custom-instance";

export const appControllerGetHello = (signal?: AbortSignal) => {
  return customInstanceAsync<void>({ url: `/`, method: "GET", signal });
};

export const getAppControllerGetHelloQueryKey = () => {
  return [`/`] as const;
};

export const getAppControllerGetHelloQueryOptions = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAppControllerGetHelloQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof appControllerGetHello>>
  > = ({ signal }) => appControllerGetHello(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type AppControllerGetHelloQueryResult = NonNullable<
  Awaited<ReturnType<typeof appControllerGetHello>>
>;
export type AppControllerGetHelloQueryError = unknown;

export const useAppControllerGetHello = <
  TData = Awaited<ReturnType<typeof appControllerGetHello>>,
  TError = unknown,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof appControllerGetHello>>,
    TError,
    TData
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAppControllerGetHelloQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Retrieves a list of all songs in the system. Optionally filter by search term.
 * @summary Get all songs
 */
export const songControllerFindAll = (
  params?: SongControllerFindAllParams,
  signal?: AbortSignal,
) => {
  return customInstanceAsync<Song[]>({
    url: `/songs`,
    method: "GET",
    params,
    signal,
  });
};

export const getSongControllerFindAllQueryKey = (
  params?: SongControllerFindAllParams,
) => {
  return [`/songs`, ...(params ? [params] : [])] as const;
};

export const getSongControllerFindAllQueryOptions = <
  TData = Awaited<ReturnType<typeof songControllerFindAll>>,
  TError = unknown,
>(
  params?: SongControllerFindAllParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof songControllerFindAll>>,
      TError,
      TData
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getSongControllerFindAllQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof songControllerFindAll>>
  > = ({ signal }) => songControllerFindAll(params, signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof songControllerFindAll>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type SongControllerFindAllQueryResult = NonNullable<
  Awaited<ReturnType<typeof songControllerFindAll>>
>;
export type SongControllerFindAllQueryError = unknown;

/**
 * @summary Get all songs
 */
export const useSongControllerFindAll = <
  TData = Awaited<ReturnType<typeof songControllerFindAll>>,
  TError = unknown,
>(
  params?: SongControllerFindAllParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof songControllerFindAll>>,
      TError,
      TData
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getSongControllerFindAllQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * Creates a new song with required metadata and files. Cover image is required, audio file is optional.
 * @summary Create a new song
 */
export const songControllerCreate = (
  songControllerCreateBody: SongControllerCreateBody,
) => {
  const formData = new FormData();
  formData.append("name", songControllerCreateBody.name);
  formData.append("artist", songControllerCreateBody.artist);
  formData.append("coverImage", songControllerCreateBody.coverImage);
  if (songControllerCreateBody.audioFile !== undefined) {
    formData.append("audioFile", songControllerCreateBody.audioFile);
  }

  return customInstanceAsync<void>({
    url: `/songs`,
    method: "POST",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
  });
};

export const getSongControllerCreateMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof songControllerCreate>>,
    TError,
    { data: SongControllerCreateBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof songControllerCreate>>,
  TError,
  { data: SongControllerCreateBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof songControllerCreate>>,
    { data: SongControllerCreateBody }
  > = (props) => {
    const { data } = props ?? {};

    return songControllerCreate(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SongControllerCreateMutationResult = NonNullable<
  Awaited<ReturnType<typeof songControllerCreate>>
>;
export type SongControllerCreateMutationBody = SongControllerCreateBody;
export type SongControllerCreateMutationError = unknown;

/**
 * @summary Create a new song
 */
export const useSongControllerCreate = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof songControllerCreate>>,
    TError,
    { data: SongControllerCreateBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof songControllerCreate>>,
  TError,
  { data: SongControllerCreateBody },
  TContext
> => {
  const mutationOptions = getSongControllerCreateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Updates an existing song by its ID. Can update metadata and/or files.
 * @summary Update a song
 */
export const songControllerUpdate = (
  id: string,
  songControllerUpdateBody: SongControllerUpdateBody,
) => {
  const formData = new FormData();
  if (songControllerUpdateBody.name !== undefined) {
    formData.append("name", songControllerUpdateBody.name);
  }
  if (songControllerUpdateBody.artist !== undefined) {
    formData.append("artist", songControllerUpdateBody.artist);
  }
  if (songControllerUpdateBody.coverImage !== undefined) {
    formData.append("coverImage", songControllerUpdateBody.coverImage);
  }
  if (songControllerUpdateBody.audioFile !== undefined) {
    formData.append("audioFile", songControllerUpdateBody.audioFile);
  }

  return customInstanceAsync<Song>({
    url: `/songs/${id}`,
    method: "PUT",
    headers: { "Content-Type": "multipart/form-data" },
    data: formData,
  });
};

export const getSongControllerUpdateMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof songControllerUpdate>>,
    TError,
    { id: string; data: SongControllerUpdateBody },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof songControllerUpdate>>,
  TError,
  { id: string; data: SongControllerUpdateBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof songControllerUpdate>>,
    { id: string; data: SongControllerUpdateBody }
  > = (props) => {
    const { id, data } = props ?? {};

    return songControllerUpdate(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SongControllerUpdateMutationResult = NonNullable<
  Awaited<ReturnType<typeof songControllerUpdate>>
>;
export type SongControllerUpdateMutationBody = SongControllerUpdateBody;
export type SongControllerUpdateMutationError = void;

/**
 * @summary Update a song
 */
export const useSongControllerUpdate = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof songControllerUpdate>>,
    TError,
    { id: string; data: SongControllerUpdateBody },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof songControllerUpdate>>,
  TError,
  { id: string; data: SongControllerUpdateBody },
  TContext
> => {
  const mutationOptions = getSongControllerUpdateMutationOptions(options);

  return useMutation(mutationOptions);
};

/**
 * Deletes a song and its associated files by ID
 * @summary Delete a song
 */
export const songControllerDelete = (id: string) => {
  return customInstanceAsync<SongControllerDelete200>({
    url: `/songs/${id}`,
    method: "DELETE",
  });
};

export const getSongControllerDeleteMutationOptions = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof songControllerDelete>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof songControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof songControllerDelete>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return songControllerDelete(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type SongControllerDeleteMutationResult = NonNullable<
  Awaited<ReturnType<typeof songControllerDelete>>
>;

export type SongControllerDeleteMutationError = void;

/**
 * @summary Delete a song
 */
export const useSongControllerDelete = <
  TError = void,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof songControllerDelete>>,
    TError,
    { id: string },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof songControllerDelete>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getSongControllerDeleteMutationOptions(options);

  return useMutation(mutationOptions);
};
